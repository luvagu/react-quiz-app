{"version":3,"sources":["components/Header.jsx","components/Progress.jsx","components/Score.jsx","components/Question.jsx","utils/fauna.helpers.js","components/Leaderboard.jsx","components/SaveScore.jsx","App.jsx","index.jsx"],"names":["Header","categories","handleSubmit","handleChange","loadingCategories","loadingQuestions","quizInProgress","defaultNumOfQuestions","onSubmit","className","htmlFor","id","onChange","disabled","map","category","value","name","defaultValue","type","min","max","step","Progress","questionNum","totalQuestions","percentage","style","width","Score","score","Question","question","handleAnswers","lastQuestion","gameEnded","useState","isAnswered","setIsAnswered","chosenAnwser","setChosenAnwser","useEffect","options","option","idx","answer","onClick","isCorrectAnswer","handleClick","client","Client","secret","process","Collection","query","Create","Index","FMap","Map","Get","Lambda","Match","Paginate","Var","createPlayer","data","a","getPlayers","player","ref","mergeSortArray","arr","mergedEntriesIntoObject","reduce","acc","val","key","toLowerCase","Object","values","sort","b","groupMergeSortArray","array","group","push","merged","categoryMerged","scores","Leaderboard","setError","leaderboard","setLeaderboard","topScorer","setTopScorer","playerData","length","console","log","SaveScore","resetGame","playerName","setPlayerName","saveScore","e","preventDefault","trim","placeholder","target","required","decodeString","string","text","document","createElement","innerHTML","App","fraction","total","error","setLoadingCategories","setLoadingQuestions","amount","apiOptions","setApiOptions","setCategories","questionsBank","setQuestionsBank","currentCategory","setCurrentCategory","currentQuestion","setCurrentQuestion","setQuestionNum","setTotalQuestions","answers","setAnswers","setScore","setQuizInProgress","setGameEnded","find","parseInt","axios","method","url","params","results","questionItem","index","correct_answer","wrongAnswers","incorrect_answers","Date","now","Math","random","setNewScoreAndQuestionNum","useRef","current","newScore","cancel","cancelToken","CancelToken","c","then","trivia_categories","catch","isCancel","timeout","setTimeout","clearTimeout","prevOptions","floor","prevData","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.41bda610.chunk.js","sourcesContent":["function Header({\r\n\tcategories,\r\n\thandleSubmit,\r\n\thandleChange,\r\n\tloadingCategories,\r\n\tloadingQuestions,\r\n\tquizInProgress,\r\n\tdefaultNumOfQuestions,\r\n}) {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<label htmlFor='category'>Category</label>\r\n\t\t\t\t\t{loadingCategories ? (\r\n\t\t\t\t\t\t<span>Loading categories...</span>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<select id='category' onChange={handleChange} disabled={loadingCategories || quizInProgress}>\r\n\t\t\t\t\t\t\t{categories.map(category => (\r\n\t\t\t\t\t\t\t\t<option value={category.id} key={category.id}>\r\n\t\t\t\t\t\t\t\t\t{category.name}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<label htmlFor='difficulty'>Difficulty</label>\r\n\t\t\t\t\t<select id='difficulty' defaultValue='any' onChange={handleChange} disabled={loadingCategories || quizInProgress}>\r\n\t\t\t\t\t\t<option value='any'>Any Difficulty</option>\r\n\t\t\t\t\t\t<option value='easy'>Easy</option>\r\n\t\t\t\t\t\t<option value='medium'>Medium</option>\r\n\t\t\t\t\t\t<option value='hard'>Hard</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<label htmlFor='type'>Type</label>\r\n\t\t\t\t\t<select id='type' defaultValue='any' onChange={handleChange} disabled={loadingCategories || quizInProgress}>\r\n\t\t\t\t\t\t<option value='any'>Any Type</option>\r\n\t\t\t\t\t\t<option value='multiple'>Multiple Choice</option>\r\n\t\t\t\t\t\t<option value='boolean'>True / False</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<label htmlFor='amount'>Questions</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\tid='amount'\r\n\t\t\t\t\t\tmin='5'\r\n\t\t\t\t\t\tmax='50'\r\n\t\t\t\t\t\tstep='5'\r\n\t\t\t\t\t\tdefaultValue={defaultNumOfQuestions}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\tdisabled={loadingCategories || quizInProgress}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName='btn'\r\n\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\tdisabled={loadingCategories || quizInProgress}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{loadingQuestions ? 'Loading...' : quizInProgress ? 'Quiz in progress' : 'Generate New Quiz'}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header\r\n","function Progress({ questionNum, totalQuestions, percentage }) {\r\n\treturn (\r\n\t\t<div className='progress-conatiner'>\r\n\t\t\t<div className='progress-text'>Question {questionNum} of {totalQuestions}</div>\r\n\t\t\t<div className='progress-bar-box'>\r\n\t\t\t\t<div className='progress-bar' style={{ width: `${percentage}%` }}></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Progress\r\n","function Score({ score }) {\r\n  return (\r\n    <div className=\"score-container\">\r\n      <div className=\"score-text\">Score</div>\r\n      <div className=\"score-number\">{score}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Score\r\n","import { useEffect, useState } from 'react'\r\n\r\nfunction Question({ question, handleAnswers, lastQuestion, gameEnded }) {\r\n\tconst [isAnswered, setIsAnswered] = useState(false)\r\n\tconst [chosenAnwser, setChosenAnwser] = useState('')\r\n\r\n\tconst handleClick = option => {\r\n\t\tsetChosenAnwser(option)\r\n\t\tsetIsAnswered(true)\r\n\t\thandleAnswers({\r\n\t\t\tid: question.id,\r\n\t\t\tisCorrectAnswer: question.answer === option,\r\n\t\t})\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tsetChosenAnwser('')\r\n\t\tsetIsAnswered(false)\r\n\t}, [question])\r\n\r\n\treturn (\r\n\t\t<article className='question'>\r\n\t\t\t<h2>{question.question}</h2>\r\n\t\t\t\r\n\t\t\t<ul>\r\n\t\t\t\t{question.options.map((option, idx) =>\r\n\t\t\t\t\tisAnswered ? (\r\n\t\t\t\t\t\t<li\r\n\t\t\t\t\t\t\tkey={option}\r\n\t\t\t\t\t\t\tclassName={`answered\r\n\t\t\t\t\t\t\t\t${option === chosenAnwser\r\n\t\t\t\t\t\t\t\t\t? chosenAnwser === question.answer\r\n\t\t\t\t\t\t\t\t\t\t? 'isRight'\r\n\t\t\t\t\t\t\t\t\t\t: 'isWrong'\r\n\t\t\t\t\t\t\t\t\t: chosenAnwser !== question.answer && option === question.answer ? 'isRight' : ''} \r\n\t\t\t\t\t\t\t`}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{option}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<li key={option} onClick={() => handleClick(option)}>\r\n\t\t\t\t\t\t\t{option}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)\r\n\t\t\t\t)}\r\n\t\t\t</ul>\r\n\r\n\t\t\t{isAnswered && !lastQuestion && <p>Getting next question... <span className='loader'>⏳</span></p>}\r\n\r\n\t\t\t{isAnswered && lastQuestion && <p>Quiz has ended! 🏁</p>}\r\n\r\n\t\t\t{isAnswered && lastQuestion && !gameEnded && <p>Computing final score... <span className='loader'>⏳</span></p>}\r\n\t\t</article>\r\n\t)\r\n}\r\n\r\nexport default Question\r\n","import { Client, query } from 'faunadb'\r\n\r\nconst client = new Client({ secret: process.env.REACT_APP_FAUNADB })\r\n\r\nconst {\r\n\tCollection,\r\n\tCreate,\r\n\tIndex,\r\n\tMap: FMap,\r\n\tGet,\r\n\tLambda,\r\n\tMatch,\r\n\tPaginate,\r\n\tVar,\r\n} = query\r\n\r\nexport const createPlayer = async data => {\r\n\treturn await client.query(Create(Collection('playerScores'), { data }))\r\n}\r\n\r\nexport const getPlayers = async () => {\r\n\tconst { data } = await client.query(\r\n\t\tFMap(\r\n\t\t\tPaginate(Match(Index('allPlayerScores'))),\r\n\t\t\tLambda('ref', Get(Var('ref')))\r\n\t\t)\r\n\t)\r\n\r\n\treturn data.map(player => ({ ...player.data, id: player.ref.id }))\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getPlayers } from '../utils/fauna.helpers'\r\n\r\nconst mergeSortArray = arr => {\r\n\tconst mergedEntriesIntoObject = arr.reduce((acc, val) => {\r\n\t\tconst key = val.name.toLowerCase()\r\n\t\tif (key in acc) {\r\n\t\t\tacc[key] = { ...acc[key], score: acc[key].score + val.score }\r\n\t\t} else {\r\n\t\t\tacc[key] = val\r\n\t\t}\r\n\t\treturn acc\r\n\t}, {})\r\n\tconst sortedArrayByHighScore = Object.values(mergedEntriesIntoObject).sort(\r\n\t\t(a, b) => a.score < b.score\r\n\t)\r\n\treturn sortedArrayByHighScore\r\n}\r\n\r\nconst groupMergeSortArray = array => {\r\n\tconst group = array.reduce((acc, val) => {\r\n\t\tconst key = val.category\r\n\t\tif (key in acc) {\r\n\t\t\tacc[key].push(val)\r\n\t\t} else {\r\n\t\t\tacc[key] = [val]\r\n\t\t}\r\n\t\treturn acc\r\n\t}, {})\r\n\r\n\tconst merged = []\r\n\tfor (const key in group) {\r\n\t\tconst categoryMerged = mergeSortArray(group[key])\r\n\t\tmerged.push({ category: key, scores: categoryMerged })\r\n\t}\r\n\r\n\treturn merged\r\n}\r\n\r\nfunction Leaderboard({ setError }) {\r\n\tconst [leaderboard, setLeaderboard] = useState(null)\r\n\tconst [topScorer, setTopScorer] = useState('')\r\n\r\n\tuseEffect(() => {\r\n\t\t;(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst playerData = await getPlayers()\r\n\t\t\t\tif (!playerData.length) return\r\n\t\t\t\tsetTopScorer(mergeSortArray(playerData)[0])\r\n\t\t\t\tsetLeaderboard(groupMergeSortArray(playerData))\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t\tsetError('🙁 Error loading leaderboard.')\r\n\t\t\t}\r\n\t\t})()\r\n\t}, [setError])\r\n\r\n\treturn (\r\n\t\t<div className='leaderboard'>\r\n\t\t\t<h1>Leaderboard 🏆</h1>\r\n\r\n\t\t\t{topScorer && (\r\n\t\t\t\t<div className='leaderboard-group gold'>\r\n\t\t\t\t\t<h3>Overall Top Scorer</h3>\r\n\t\t\t\t\t<span>🥇 {topScorer.name} - {topScorer.score}</span>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\r\n\t\t\t{leaderboard ? (\r\n\t\t\t\tleaderboard.map(({ category, scores }) => (\r\n\t\t\t\t\t<div key={category} className='leaderboard-group'>\r\n\t\t\t\t\t\t<h3>{category}</h3>\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t{scores.map((player, idx) => (\r\n\t\t\t\t\t\t\t\t<li key={player.id}>\r\n\t\t\t\t\t\t\t\t\t{idx === 0 && '🥇 '}\r\n\t\t\t\t\t\t\t\t\t{idx === 1 && '🥈 '}\r\n\t\t\t\t\t\t\t\t\t{idx === 2 && '🥉 '}\r\n\t\t\t\t\t\t\t\t\t{player.name} - {player.score}\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))\r\n\t\t\t) : (\r\n\t\t\t\t<h3>No scores yet!</h3>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Leaderboard\r\n","import { Fragment, useState } from 'react'\r\nimport { createPlayer } from '../utils/fauna.helpers'\r\n\r\nfunction SaveScore({ category, score, setError, resetGame }) {\r\n\tconst [playerName, setPlayerName] = useState('')\r\n\r\n\tconst saveScore = async e => {\r\n\t\te.preventDefault()\r\n\r\n\t\tif (!playerName || !category || !score) return\r\n\r\n\t\ttry {\r\n\t\t\tawait createPlayer({ category, name: playerName.trim(), score })\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error)\r\n\t\t\tsetError('🙁 Error saving player score.')\r\n\t\t}\r\n\r\n\t\tresetGame()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className='score-form' onSubmit={saveScore}>\r\n\t\t\t{score ? (\r\n\t\t\t\t<Fragment>\r\n\t\t\t\t\t<h3>You got a score! 🙌</h3>\r\n\t\t\t\t\t<p>Enter your name below to save your score.</p>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tvalue={playerName}\r\n\t\t\t\t\t\tplaceholder='Enter your name'\r\n\t\t\t\t\t\tonChange={e => setPlayerName(e.target.value)}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button className='btn' type='submit'>\r\n\t\t\t\t\t\tSave\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<span>or</span>\r\n\t\t\t\t</Fragment>\r\n\t\t\t) : (\r\n\t\t\t\t<h3>You didn&apos;t get a score! 😥</h3>\r\n\t\t\t)}\r\n\r\n\t\t\t<button className='btn' type='button' onClick={() => resetGame()}>\r\n\t\t\t\tBack to Leaderboard\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default SaveScore\r\n","import { Fragment, useEffect, useRef, useState } from 'react'\nimport axios from 'axios'\nimport Header from './components/Header'\nimport Progress from './components/Progress'\nimport Score from './components/Score'\nimport Question from './components/Question'\nimport Leaderboard from './components/Leaderboard'\nimport SaveScore from './components/SaveScore'\n\nconst decodeString = string => {\n\tconst text = document.createElement('textarea')\n\ttext.innerHTML = string\n\treturn text.value\n}\n\nconst calculatePercentage = (fraction, total) => {\n\tif (fraction === 0 || total === 0) return 0\n\treturn Math.floor((fraction * 100) / total)\n}\n\nfunction App() {\n\tconst [error, setError] = useState(false)\n\tconst [loadingCategories, setLoadingCategories] = useState(false)\n\tconst [loadingQuestions, setLoadingQuestions] = useState(false)\n\tconst [apiOptions, setApiOptions] = useState({ amount: '10' })\n\tconst [categories, setCategories] = useState([])\n\tconst [questionsBank, setQuestionsBank] = useState([])\n\tconst [currentCategory, setCurrentCategory] = useState('General Knowledge')\n\tconst [currentQuestion, setCurrentQuestion] = useState(null)\n\tconst [questionNum, setQuestionNum] = useState(0)\n\tconst [totalQuestions, setTotalQuestions] = useState(0)\n\tconst [answers, setAnswers] = useState([])\n\tconst [score, setScore] = useState(0)\n\tconst [quizInProgress, setQuizInProgress] = useState(false)\n\tconst [gameEnded, setGameEnded] = useState(false)\n\n\tconst resetGame = () => {\n\t\tsetQuestionsBank([])\n\t\tsetCurrentCategory('General Knowledge')\n\t\tsetCurrentQuestion(null)\n\t\tsetQuestionNum(0)\n\t\tsetTotalQuestions(0)\n\t\tsetAnswers([])\n\t\tsetScore(0)\n\t\tsetQuizInProgress(false)\n\t\tsetGameEnded(false)\n\t}\n\n\tconst handleChange = e => {\n\t\tsetApiOptions(prevOptions => ({\n\t\t\t...prevOptions,\n\t\t\t[e.target.id]: e.target.value,\n\t\t}))\n\t}\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault()\n\n\t\tresetGame()\n\n\t\tif (apiOptions.category) {\n\t\t\tsetCurrentCategory(\n\t\t\t\tcategories.find(category => category.id === parseInt(apiOptions.category)).name\n\t\t\t)\n\t\t}\n\n\t\tsetLoadingQuestions(true)\n\t\ttry {\n\t\t\tconst { data } = await axios({\n\t\t\t\tmethod: 'GET',\n\t\t\t\turl: 'https://opentdb.com/api.php',\n\t\t\t\tparams: { ...apiOptions },\n\t\t\t})\n\n\t\t\tif (!data.results.length) {\n\t\t\t\tsetError(\n\t\t\t\t\t'🙁 No questions found with the selected options. please try again!'\n\t\t\t\t)\n\t\t\t\tsetLoadingQuestions(false)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tsetQuestionsBank(\n\t\t\t\tdata.results.map((questionItem, index) => {\n\t\t\t\t\tconst answer = decodeString(questionItem.correct_answer)\n\t\t\t\t\tconst wrongAnswers = [\n\t\t\t\t\t\t...questionItem.incorrect_answers.map(a => decodeString(a)),\n\t\t\t\t\t\tanswer,\n\t\t\t\t\t]\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: `${index}-${Date.now()}`,\n\t\t\t\t\t\tquestion: decodeString(questionItem.question),\n\t\t\t\t\t\tanswer: answer,\n\t\t\t\t\t\toptions: wrongAnswers.sort(() => Math.random() - 0.5),\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t)\n\t\t\tsetTotalQuestions(data.results.length)\n\t\t\tsetQuizInProgress(true)\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t\tsetError(\n\t\t\t\t'🙁 Error loading questions from the API. Please try again later.'\n\t\t\t)\n\t\t}\n\t\tsetLoadingQuestions(false)\n\t}\n\n\tconst handleAnswers = data => {\n\t\tsetAnswers(prevData => [...prevData, data])\n\t\tsetScore('?')\n\t}\n\n\tconst setNewScoreAndQuestionNum = useRef()\n\n\tsetNewScoreAndQuestionNum.current = () => {\n\t\tlet newScore = 0\n\t\tfor (const answer of answers) {\n\t\t\tif (answer.isCorrectAnswer) newScore += 100\n\t\t}\n\t\tsetScore(newScore)\n\n\t\tif (questionNum < totalQuestions) {\n\t\t\tsetCurrentQuestion(questionsBank[questionNum])\n\t\t\tsetQuestionNum(questionNum + 1)\n\t\t} else {\n\t\t\tsetQuizInProgress(false)\n\t\t}\n\n\t\tif (questionNum === totalQuestions) setGameEnded(true)\n\t}\n\n\tuseEffect(() => {\n\t\tsetLoadingCategories(true)\n\n\t\tlet cancel\n\n\t\taxios({\n\t\t\tmethod: 'GET',\n\t\t\turl: 'https://opentdb.com/api_category.php',\n\t\t\tcancelToken: new axios.CancelToken(c => (cancel = c)),\n\t\t})\n\t\t\t.then(({ data }) => {\n\t\t\t\tsetCategories(data.trivia_categories)\n\t\t\t\tsetLoadingCategories(false)\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tif (axios.isCancel(error)) return\n\t\t\t\tconsole.log(error)\n\t\t\t\tsetLoadingCategories(false)\n\t\t\t\tsetError(\n\t\t\t\t\t'🙁 Error loading categories from the API. Please try again later.'\n\t\t\t\t)\n\t\t\t})\n\n\t\treturn () => cancel()\n\t}, [])\n\n\tuseEffect(() => {\n\t\tsetCurrentQuestion(questionsBank[0])\n\t\tsetQuestionNum(1)\n\t}, [questionsBank])\n\n\tuseEffect(() => {\n\t\tif (!answers.length) return\n\t\tconst timeout = setTimeout(() => setNewScoreAndQuestionNum.current(), 3000)\n\t\treturn () => clearTimeout(timeout)\n\t}, [answers])\n\n\tuseEffect(() => {\n\t\tconst timeout = setTimeout(() => setError(false), 5000)\n\t\treturn () => clearTimeout(timeout)\n\t}, [error])\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Header\n\t\t\t\tcategories={categories}\n\t\t\t\thandleChange={handleChange}\n\t\t\t\thandleSubmit={handleSubmit}\n\t\t\t\tloadingCategories={loadingCategories}\n\t\t\t\tloadingQuestions={loadingQuestions}\n\t\t\t\tquizInProgress={quizInProgress}\n\t\t\t\tdefaultNumOfQuestions={apiOptions.amount}\n\t\t\t/>\n\n\t\t\t<div className='container'>\n\t\t\t\t{error && <div className='error-message'>{error}</div>}\n\n\t\t\t\t{!quizInProgress && !totalQuestions && (\n\t\t\t\t\t<Leaderboard setError={setError} />\n\t\t\t\t)}\n\n\t\t\t\t{currentQuestion && (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<div className='flex-between'>\n\t\t\t\t\t\t\t<Progress\n\t\t\t\t\t\t\t\tquestionNum={questionNum}\n\t\t\t\t\t\t\t\ttotalQuestions={totalQuestions}\n\t\t\t\t\t\t\t\tpercentage={calculatePercentage(questionNum, totalQuestions)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Score score={score} />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<Question\n\t\t\t\t\t\t\tquestion={currentQuestion}\n\t\t\t\t\t\t\thandleAnswers={handleAnswers}\n\t\t\t\t\t\t\tlastQuestion={questionNum === totalQuestions}\n\t\t\t\t\t\t\tgameEnded={gameEnded}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Fragment>\n\t\t\t\t)}\n\n\t\t\t\t{gameEnded && (\n\t\t\t\t\t<SaveScore\n\t\t\t\t\t\tcategory={currentCategory}\n\t\t\t\t\t\tscore={score}\n\t\t\t\t\t\tsetError={setError}\n\t\t\t\t\t\tresetGame={resetGame}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</Fragment>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}