{"version":3,"sources":["components/Header.jsx","components/Progress.jsx","components/Score.jsx","components/Question.jsx","utils/fauna.helpers.js","components/Leaderboard.jsx","components/SaveScore.jsx","App.jsx","index.jsx"],"names":["Header","categories","handleSubmit","handleChange","setWithTimer","loadingCategories","loadingQuestions","quizInProgress","defaultNumOfQuestions","onSubmit","className","htmlFor","id","defaultValue","onChange","disabled","map","category","value","name","e","parseInt","target","type","min","max","step","Progress","questionNum","totalQuestions","percentage","progressRef","useRef","useEffect","current","style","setProperty","ref","Score","score","timer","withTimer","Question","question","handleAnswers","setTimer","lastQuestion","gameEnded","useState","isAnswered","setIsAnswered","chosenAnwser","setChosenAnwser","handleTimeout","answer","seconds","countDown","setInterval","clearInterval","options","option","idx","onClick","isCorrectAnswer","handleChosenAnser","client","Client","secret","process","Collection","query","Create","Index","FMap","Map","Get","Lambda","Match","Paginate","Var","createPlayer","data","a","getPlayers","player","mergeSortArray","arr","mergedEntriesIntoObject","reduce","acc","val","key","toLowerCase","Object","values","sort","b","groupMergeSortArray","array","group","push","merged","categoryMerged","scores","Leaderboard","setError","isLoading","setIsLoading","leaderboard","setLeaderboard","topScorer","setTopScorer","playerData","length","console","log","SaveScore","resetGame","playerName","setPlayerName","saveScore","preventDefault","trim","placeholder","required","decodeString","string","text","document","createElement","innerHTML","App","fraction","total","error","setLoadingCategories","setLoadingQuestions","amount","apiOptions","setApiOptions","setCategories","questionsBank","setQuestionsBank","currentCategory","setCurrentCategory","currentQuestion","setCurrentQuestion","setQuestionNum","setTotalQuestions","answers","setAnswers","setScore","setQuizInProgress","setGameEnded","find","axios","method","url","params","results","questionItem","index","correct_answer","wrongAnswers","incorrect_answers","Date","now","Math","random","setNewScoreAndQuestionNum","newScore","cancel","cancelToken","CancelToken","c","then","sortedByCategoryNameAsc","trivia_categories","catch","isCancel","timeout","setTimeout","clearTimeout","prevOptions","floor","prevData","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b3b0ba14.chunk.js","sourcesContent":["function Header({\r\n\tcategories,\r\n\thandleSubmit,\r\n\thandleChange,\r\n\tsetWithTimer,\r\n\tloadingCategories,\r\n\tloadingQuestions,\r\n\tquizInProgress,\r\n\tdefaultNumOfQuestions,\r\n}) {\r\n\treturn (\r\n\t\t<header>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<label htmlFor='category'>Category</label>\r\n\t\t\t\t\t{loadingCategories ? (\r\n\t\t\t\t\t\t<span>Loading categories...</span>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\tid='category'\r\n\t\t\t\t\t\t\tdefaultValue='9'\r\n\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\tdisabled={loadingCategories || quizInProgress}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{categories.map(category => (\r\n\t\t\t\t\t\t\t\t<option value={category.id} key={category.id}>\r\n\t\t\t\t\t\t\t\t\t{category.name}\r\n\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<label htmlFor='difficulty'>Difficulty</label>\r\n\t\t\t\t\t<select\r\n\t\t\t\t\t\tid='difficulty'\r\n\t\t\t\t\t\tdefaultValue=''\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\tdisabled={loadingCategories || quizInProgress}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option value=''>Any Difficulty</option>\r\n\t\t\t\t\t\t<option value='easy'>Easy</option>\r\n\t\t\t\t\t\t<option value='medium'>Medium</option>\r\n\t\t\t\t\t\t<option value='hard'>Hard</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<label htmlFor='type'>Type</label>\r\n\t\t\t\t\t<select\r\n\t\t\t\t\t\tid='type'\r\n\t\t\t\t\t\tdefaultValue=''\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\tdisabled={loadingCategories || quizInProgress}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option value=''>Any Type</option>\r\n\t\t\t\t\t\t<option value='multiple'>Multiple Choice</option>\r\n\t\t\t\t\t\t<option value='boolean'>True / False</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<label htmlFor='timer'>Timer</label>\r\n\t\t\t\t\t<select\r\n\t\t\t\t\t\tid='timer'\r\n\t\t\t\t\t\tdefaultValue=''\r\n\t\t\t\t\t\tonChange={e => setWithTimer(parseInt(e.target.value) === 0 ? false : parseInt(e.target.value))}\r\n\t\t\t\t\t\tdisabled={loadingCategories || quizInProgress}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<option value='0'>No</option>\r\n\t\t\t\t\t\t<option value='5'>5s</option>\r\n\t\t\t\t\t\t<option value='10'>10s</option>\r\n\t\t\t\t\t\t<option value='15'>15s</option>\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<label htmlFor='amount'>Questions</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='number'\r\n\t\t\t\t\t\tid='amount'\r\n\t\t\t\t\t\tmin='5'\r\n\t\t\t\t\t\tmax='50'\r\n\t\t\t\t\t\tstep='5'\r\n\t\t\t\t\t\tdefaultValue={defaultNumOfQuestions}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\tdisabled={loadingCategories || quizInProgress}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='form-group'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName='btn'\r\n\t\t\t\t\t\ttype='submit'\r\n\t\t\t\t\t\tdisabled={loadingCategories || quizInProgress}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{loadingQuestions\r\n\t\t\t\t\t\t\t? 'Loading...'\r\n\t\t\t\t\t\t\t: quizInProgress\r\n\t\t\t\t\t\t\t? 'Quiz in progress'\r\n\t\t\t\t\t\t\t: 'Generate New Quiz'}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Header\r\n","import { useEffect, useRef } from 'react'\r\n\r\nfunction Progress({ questionNum, totalQuestions, percentage }) {\r\n\tconst progressRef = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tprogressRef.current.style.setProperty('--progress', percentage)\r\n\t}, [percentage])\r\n\r\n\treturn (\r\n\t\t<div className='progress-conatiner'>\r\n\t\t\t<div className='progress-text'>\r\n\t\t\t\tQuestion {questionNum} of {totalQuestions}\r\n\t\t\t</div>\r\n\t\t\t<div ref={progressRef} className='progress-bar'></div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Progress\r\n","function Score({ score, timer, withTimer }) {\r\n\treturn (\r\n\t\t<div className='score-timer-container'>\r\n\t\t\t{withTimer && (\r\n\t\t\t\t<div className='score-timer-border'>\r\n\t\t\t\t\t<div className='score-timer-text'>Timer</div>\r\n\t\t\t\t\t<div className='score-timer-number'>{timer}</div>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t<div>\r\n\t\t\t\t<div className='score-timer-text'>Score</div>\r\n\t\t\t\t<div className='score-timer-number'>{score}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Score\r\n","import { useEffect, useRef, useState } from 'react'\r\n\r\nfunction Question({\r\n\tquestion,\r\n\thandleAnswers,\r\n\tsetTimer,\r\n\twithTimer,\r\n\tlastQuestion,\r\n\tgameEnded,\r\n}) {\r\n\tconst [isAnswered, setIsAnswered] = useState(false)\r\n\tconst [chosenAnwser, setChosenAnwser] = useState('')\r\n\r\n\tconst handleChosenAnser = option => {\r\n\t\tsetChosenAnwser(option)\r\n\t\tsetIsAnswered(true)\r\n\t\thandleAnswers({\r\n\t\t\tid: question.id,\r\n\t\t\tisCorrectAnswer: question.answer === option,\r\n\t\t})\r\n\t}\r\n\r\n\tconst handleTimeout = useRef()\r\n\r\n\thandleTimeout.current = () => {\r\n\t\tsetChosenAnwser(question.answer)\r\n\t\tsetIsAnswered(true)\r\n\t\thandleAnswers(null)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tsetChosenAnwser('')\r\n\t\tsetIsAnswered(false)\r\n\t}, [question])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!withTimer) return\r\n\r\n\t\tlet seconds = withTimer\r\n\r\n\t\tconst countDown = setInterval(() => {\r\n\t\t\tsetTimer(seconds)\r\n\t\t\tseconds--\r\n\r\n\t\t\tif (isAnswered) {\r\n\t\t\t\tsetTimer(0)\r\n\t\t\t\treturn clearInterval(countDown)\r\n\t\t\t}\r\n\r\n\t\t\tif (seconds < 0 && !isAnswered) {\r\n\t\t\t\tsetTimer(0)\r\n\t\t\t\thandleTimeout.current()\r\n\t\t\t\treturn clearInterval(countDown)\r\n\t\t\t}\r\n\t\t}, 1000)\r\n\r\n\t\treturn () => clearInterval(countDown)\r\n\t}, [withTimer, question, setTimer, isAnswered])\r\n\r\n\treturn (\r\n\t\t<article className='question'>\r\n\t\t\t<h2>{question.question}</h2>\r\n\r\n\t\t\t<ul>\r\n\t\t\t\t{question.options.map((option, idx) =>\r\n\t\t\t\t\tisAnswered ? (\r\n\t\t\t\t\t\t<li\r\n\t\t\t\t\t\t\tkey={option}\r\n\t\t\t\t\t\t\tclassName={`answered\r\n\t\t\t\t\t\t\t\t${\r\n\t\t\t\t\t\t\t\t\toption === chosenAnwser\r\n\t\t\t\t\t\t\t\t\t\t? chosenAnwser === question.answer\r\n\t\t\t\t\t\t\t\t\t\t\t? 'isRight'\r\n\t\t\t\t\t\t\t\t\t\t\t: 'isWrong'\r\n\t\t\t\t\t\t\t\t\t\t: chosenAnwser !== question.answer &&\r\n\t\t\t\t\t\t\t\t\t\t  option === question.answer\r\n\t\t\t\t\t\t\t\t\t\t? 'isRight'\r\n\t\t\t\t\t\t\t\t\t\t: ''\r\n\t\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\t`}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{option}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<li key={option} onClick={() => handleChosenAnser(option)}>\r\n\t\t\t\t\t\t\t{option}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)\r\n\t\t\t\t)}\r\n\t\t\t</ul>\r\n\r\n\t\t\t{isAnswered && !lastQuestion && (\r\n\t\t\t\t<p>\r\n\t\t\t\t\tGetting next question... <span className='loader'>⏳</span>\r\n\t\t\t\t</p>\r\n\t\t\t)}\r\n\r\n\t\t\t{isAnswered && lastQuestion && <p>Quiz has ended! 🏁</p>}\r\n\r\n\t\t\t{isAnswered && lastQuestion && !gameEnded && (\r\n\t\t\t\t<p>\r\n\t\t\t\t\tComputing final score... <span className='loader'>⏳</span>\r\n\t\t\t\t</p>\r\n\t\t\t)}\r\n\t\t</article>\r\n\t)\r\n}\r\n\r\nexport default Question\r\n","import { Client, query } from 'faunadb'\r\n\r\nconst client = new Client({ secret: process.env.REACT_APP_FAUNADB })\r\n\r\nconst {\r\n\tCollection,\r\n\tCreate,\r\n\tIndex,\r\n\tMap: FMap,\r\n\tGet,\r\n\tLambda,\r\n\tMatch,\r\n\tPaginate,\r\n\tVar,\r\n} = query\r\n\r\nexport const createPlayer = async data => {\r\n\treturn await client.query(Create(Collection('playerScores'), { data }))\r\n}\r\n\r\nexport const getPlayers = async () => {\r\n\tconst { data } = await client.query(\r\n\t\tFMap(\r\n\t\t\tPaginate(Match(Index('allPlayerScores'))),\r\n\t\t\tLambda('ref', Get(Var('ref')))\r\n\t\t)\r\n\t)\r\n\r\n\treturn data.map(player => ({ ...player.data, id: player.ref.id }))\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getPlayers } from '../utils/fauna.helpers'\r\n\r\nconst mergeSortArray = arr => {\r\n\tconst mergedEntriesIntoObject = arr.reduce((acc, val) => {\r\n\t\tconst key = val.name.toLowerCase()\r\n\t\tif (key in acc) {\r\n\t\t\tacc[key] = { ...acc[key], score: acc[key].score + val.score }\r\n\t\t} else {\r\n\t\t\tacc[key] = val\r\n\t\t}\r\n\t\treturn acc\r\n\t}, {})\r\n\tconst sortedArrayByHighScore = Object.values(mergedEntriesIntoObject).sort(\r\n\t\t(a, b) => b.score - a.score\r\n\t)\r\n\treturn sortedArrayByHighScore\r\n}\r\n\r\nconst groupMergeSortArray = array => {\r\n\tconst group = array.reduce((acc, val) => {\r\n\t\tconst key = val.category\r\n\t\tif (key in acc) {\r\n\t\t\tacc[key].push(val)\r\n\t\t} else {\r\n\t\t\tacc[key] = [val]\r\n\t\t}\r\n\t\treturn acc\r\n\t}, {})\r\n\r\n\tconst merged = []\r\n\tfor (const key in group) {\r\n\t\tconst categoryMerged = mergeSortArray(group[key])\r\n\t\tmerged.push({ category: key, scores: categoryMerged })\r\n\t}\r\n\r\n\tconst sortedByCategoryNameAsc = merged.sort((a, b) => a.category > b.category)\r\n\r\n\treturn sortedByCategoryNameAsc\r\n}\r\n\r\nfunction Leaderboard({ setError }) {\r\n\tconst [isLoading, setIsLoading] = useState(false)\r\n\tconst [leaderboard, setLeaderboard] = useState(null)\r\n\tconst [topScorer, setTopScorer] = useState('')\r\n\r\n\tuseEffect(() => {\r\n\t\t;(async () => {\r\n\t\t\tsetIsLoading(true)\r\n\t\t\ttry {\r\n\t\t\t\tconst playerData = await getPlayers()\r\n\t\t\t\tif (!playerData.length) {\r\n\t\t\t\t\treturn setIsLoading(false)\r\n\t\t\t\t}\r\n\t\t\t\tsetTopScorer(mergeSortArray(playerData)[0])\r\n\t\t\t\tsetLeaderboard(groupMergeSortArray(playerData))\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t\tsetError('🙁 Error loading leaderboard.')\r\n\t\t\t}\r\n\t\t\tsetIsLoading(false)\r\n\t\t})()\r\n\t}, [setError])\r\n\r\n\treturn (\r\n\t\t<div className='leaderboard'>\r\n\t\t\t<h1>Leaderboard 🏆</h1>\r\n\r\n\t\t\t{topScorer && (\r\n\t\t\t\t<div className='leaderboard-group gold'>\r\n\t\t\t\t\t<h3>Overall Top Scorer</h3>\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\t🥇 {topScorer.name} - {topScorer.score}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\r\n\t\t\t{leaderboard &&\r\n\t\t\t\tleaderboard.map(({ category, scores }) => (\r\n\t\t\t\t\t<div key={category} className='leaderboard-group'>\r\n\t\t\t\t\t\t<h3>{category}</h3>\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t{scores.map((player, idx) => (\r\n\t\t\t\t\t\t\t\t<li key={player.id}>\r\n\t\t\t\t\t\t\t\t\t{idx === 0 && '🥇 '}\r\n\t\t\t\t\t\t\t\t\t{idx === 1 && '🥈 '}\r\n\t\t\t\t\t\t\t\t\t{idx === 2 && '🥉 '}\r\n\t\t\t\t\t\t\t\t\t{player.name} - {player.score}\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\r\n\t\t\t{isLoading && <h3>Loading leaderboard...</h3>}\r\n\r\n\t\t\t{!leaderboard && !isLoading && <h3>No scores yet!</h3>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Leaderboard\r\n","import { Fragment, useState } from 'react'\r\nimport { createPlayer } from '../utils/fauna.helpers'\r\n\r\nfunction SaveScore({ category, score, setError, resetGame }) {\r\n\tconst [playerName, setPlayerName] = useState('')\r\n\r\n\tconst saveScore = async e => {\r\n\t\te.preventDefault()\r\n\r\n\t\tif (!playerName || !category || !score) return\r\n\r\n\t\ttry {\r\n\t\t\tawait createPlayer({ category, name: playerName.trim(), score })\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error)\r\n\t\t\tsetError('🙁 Error saving player score.')\r\n\t\t}\r\n\r\n\t\tresetGame()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className='score-form' onSubmit={saveScore}>\r\n\t\t\t{score ? (\r\n\t\t\t\t<Fragment>\r\n\t\t\t\t\t<h3>You got a score! 🙌</h3>\r\n\t\t\t\t\t<p>Enter your name below to save your score.</p>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tvalue={playerName}\r\n\t\t\t\t\t\tplaceholder='Enter your name'\r\n\t\t\t\t\t\tonChange={e => setPlayerName(e.target.value)}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button className='btn' type='submit'>\r\n\t\t\t\t\t\tSave\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<span>or</span>\r\n\t\t\t\t</Fragment>\r\n\t\t\t) : (\r\n\t\t\t\t<h3>You didn&apos;t get a score! 😥</h3>\r\n\t\t\t)}\r\n\r\n\t\t\t<button className='btn' type='button' onClick={() => resetGame()}>\r\n\t\t\t\tBack to Leaderboard\r\n\t\t\t</button>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default SaveScore\r\n","import { Fragment, useEffect, useRef, useState } from 'react'\nimport axios from 'axios'\nimport Header from './components/Header'\nimport Progress from './components/Progress'\nimport Score from './components/Score'\nimport Question from './components/Question'\nimport Leaderboard from './components/Leaderboard'\nimport SaveScore from './components/SaveScore'\n\nconst decodeString = string => {\n\tconst text = document.createElement('textarea')\n\ttext.innerHTML = string\n\treturn text.value\n}\n\nconst calculatePercentage = (fraction, total) => {\n\tif (fraction === 0 || total === 0) return 0\n\treturn Math.floor((fraction * 100) / total)\n}\n\nfunction App() {\n\tconst [error, setError] = useState(false)\n\tconst [loadingCategories, setLoadingCategories] = useState(false)\n\tconst [loadingQuestions, setLoadingQuestions] = useState(false)\n\tconst [apiOptions, setApiOptions] = useState({ amount: '5' })\n\tconst [withTimer, setWithTimer] = useState(false)\n\tconst [timer, setTimer] = useState(0)\n\tconst [categories, setCategories] = useState([])\n\tconst [questionsBank, setQuestionsBank] = useState([])\n\tconst [currentCategory, setCurrentCategory] = useState('General Knowledge')\n\tconst [currentQuestion, setCurrentQuestion] = useState(null)\n\tconst [questionNum, setQuestionNum] = useState(0)\n\tconst [totalQuestions, setTotalQuestions] = useState(0)\n\tconst [answers, setAnswers] = useState([])\n\tconst [score, setScore] = useState(0)\n\tconst [quizInProgress, setQuizInProgress] = useState(false)\n\tconst [gameEnded, setGameEnded] = useState(false)\n\n\tconst resetGame = () => {\n\t\tsetTimer(0)\n\t\tsetQuestionsBank([])\n\t\tsetCurrentCategory('General Knowledge')\n\t\tsetCurrentQuestion(null)\n\t\tsetQuestionNum(0)\n\t\tsetTotalQuestions(0)\n\t\tsetAnswers([])\n\t\tsetScore(0)\n\t\tsetQuizInProgress(false)\n\t\tsetGameEnded(false)\n\t}\n\n\tconst handleChange = e => {\n\t\tsetApiOptions(prevOptions => ({\n\t\t\t...prevOptions,\n\t\t\t[e.target.id]: e.target.value,\n\t\t}))\n\t}\n\n\tconst handleSubmit = async e => {\n\t\te.preventDefault()\n\n\t\tresetGame()\n\n\t\tif (apiOptions.category) {\n\t\t\tsetCurrentCategory(\n\t\t\t\tcategories.find(\n\t\t\t\t\tcategory => category.id === parseInt(apiOptions.category)\n\t\t\t\t).name\n\t\t\t)\n\t\t}\n\n\t\tsetLoadingQuestions(true)\n\t\ttry {\n\t\t\tconst { data } = await axios({\n\t\t\t\tmethod: 'GET',\n\t\t\t\turl: 'https://opentdb.com/api.php',\n\t\t\t\tparams: { ...apiOptions },\n\t\t\t})\n\n\t\t\tif (!data.results.length) {\n\t\t\t\tsetError(\n\t\t\t\t\t'🙁 No questions found with the selected options. please try again!'\n\t\t\t\t)\n\t\t\t\tsetLoadingQuestions(false)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tsetQuestionsBank(\n\t\t\t\tdata.results.map((questionItem, index) => {\n\t\t\t\t\tconst answer = decodeString(questionItem.correct_answer)\n\t\t\t\t\tconst wrongAnswers = [\n\t\t\t\t\t\t...questionItem.incorrect_answers.map(a => decodeString(a)),\n\t\t\t\t\t\tanswer,\n\t\t\t\t\t]\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: `${index}-${Date.now()}`,\n\t\t\t\t\t\tquestion: decodeString(questionItem.question),\n\t\t\t\t\t\tanswer: answer,\n\t\t\t\t\t\toptions: wrongAnswers.sort(() => Math.random() - 0.5),\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t)\n\t\t\tsetTotalQuestions(data.results.length)\n\t\t\tsetQuizInProgress(true)\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t\tsetError(\n\t\t\t\t'🙁 Error loading questions from the API. Please try again later.'\n\t\t\t)\n\t\t}\n\t\tsetLoadingQuestions(false)\n\t}\n\n\tconst handleAnswers = data => {\n\t\tsetAnswers(prevData => [...prevData, data])\n\t\tsetScore('?')\n\t}\n\n\tconst setNewScoreAndQuestionNum = useRef()\n\n\tsetNewScoreAndQuestionNum.current = () => {\n\t\tlet newScore = 0\n\t\t\n\t\tfor (const answer of answers) {\n\t\t\tif (answer !== null && answer.isCorrectAnswer) newScore += 100\n\t\t}\n\n\t\tsetScore(newScore)\n\n\t\tif (questionNum < totalQuestions) {\n\t\t\tsetCurrentQuestion(questionsBank[questionNum])\n\t\t\tsetQuestionNum(questionNum + 1)\n\t\t}\n\n\t\tif (questionNum === totalQuestions) setGameEnded(true)\n\t}\n\n\tuseEffect(() => {\n\t\tsetLoadingCategories(true)\n\n\t\tlet cancel\n\n\t\taxios({\n\t\t\tmethod: 'GET',\n\t\t\turl: 'https://opentdb.com/api_category.php',\n\t\t\tcancelToken: new axios.CancelToken(c => (cancel = c)),\n\t\t})\n\t\t\t.then(({ data }) => {\n\t\t\t\tconst sortedByCategoryNameAsc = data.trivia_categories.sort(\n\t\t\t\t\t(a, b) => a.name > b.name\n\t\t\t\t)\n\t\t\t\tsetCategories(sortedByCategoryNameAsc)\n\t\t\t\tsetLoadingCategories(false)\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tif (axios.isCancel(error)) return\n\t\t\t\tconsole.log(error)\n\t\t\t\tsetLoadingCategories(false)\n\t\t\t\tsetError(\n\t\t\t\t\t'🙁 Error loading categories from the API. Please try again later.'\n\t\t\t\t)\n\t\t\t})\n\n\t\treturn () => cancel()\n\t}, [])\n\n\tuseEffect(() => {\n\t\tsetCurrentQuestion(questionsBank[0])\n\t\tsetQuestionNum(1)\n\t}, [questionsBank])\n\n\tuseEffect(() => {\n\t\tif (!answers.length) return\n\t\tconst timeout = setTimeout(() => setNewScoreAndQuestionNum.current(), 1500)\n\t\treturn () => clearTimeout(timeout)\n\t}, [answers])\n\n\tuseEffect(() => {\n\t\tconst timeout = setTimeout(() => setError(false), 5000)\n\t\treturn () => clearTimeout(timeout)\n\t}, [error])\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Header\n\t\t\t\tcategories={categories}\n\t\t\t\thandleChange={handleChange}\n\t\t\t\thandleSubmit={handleSubmit}\n\t\t\t\tsetWithTimer={setWithTimer}\n\t\t\t\tloadingCategories={loadingCategories}\n\t\t\t\tloadingQuestions={loadingQuestions}\n\t\t\t\tquizInProgress={quizInProgress}\n\t\t\t\tdefaultNumOfQuestions={apiOptions.amount}\n\t\t\t/>\n\n\t\t\t<div className='container'>\n\t\t\t\t{error && <div className='error-message'>{error}</div>}\n\n\t\t\t\t{!quizInProgress && !totalQuestions && (\n\t\t\t\t\t<Leaderboard setError={setError} />\n\t\t\t\t)}\n\n\t\t\t\t{currentQuestion && (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<div className='flex-between'>\n\t\t\t\t\t\t\t<Progress\n\t\t\t\t\t\t\t\tquestionNum={questionNum}\n\t\t\t\t\t\t\t\ttotalQuestions={totalQuestions}\n\t\t\t\t\t\t\t\tpercentage={calculatePercentage(questionNum, totalQuestions)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Score\n\t\t\t\t\t\t\t\tquestion={currentQuestion}\n\t\t\t\t\t\t\t\tscore={score}\n\t\t\t\t\t\t\t\twithTimer={withTimer}\n\t\t\t\t\t\t\t\ttimer={timer}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<Question\n\t\t\t\t\t\t\tquestion={currentQuestion}\n\t\t\t\t\t\t\thandleAnswers={handleAnswers}\n\t\t\t\t\t\t\tlastQuestion={questionNum === totalQuestions}\n\t\t\t\t\t\t\tgameEnded={gameEnded}\n\t\t\t\t\t\t\tsetTimer={setTimer}\n\t\t\t\t\t\t\twithTimer={withTimer}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Fragment>\n\t\t\t\t)}\n\n\t\t\t\t{gameEnded && (\n\t\t\t\t\t<SaveScore\n\t\t\t\t\t\tcategory={currentCategory}\n\t\t\t\t\t\tscore={score}\n\t\t\t\t\t\tsetError={setError}\n\t\t\t\t\t\tresetGame={resetGame}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</Fragment>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}